
### Compilation ###
- https://gist.github.com/edsiper/fac9a816898e16fc0036f5508320e8b4
- https://kubernetes.io/docs/reference/kubectl/cheatsheet/

### Continuousn Deploiment ###
- https://cloud.google.com/solutions/continuous-delivery-jenkins-kubernetes-engine

### Kubernetes and Vault ###
- https://medium.com/qubit-engineering/kubernetes-up-integrated-secrets-configuration-5a15b9f5a6c6

## Hacking Kubernetes ###
- http://www.elladodelmal.com/2019/01/hacking-kubernetes-auditoria-de.html
- https://www.4armed.com/blog/hacking-kubelet-on-gke/
- https://medium.com/@pczarkowski/the-kubernetes-api-call-is-coming-from-inside-the-cluster-f1a115bd2066

## Undestanding External Services ##
- https://www.ovh.com/blog/getting-external-traffic-into-kubernetes-clusterip-nodeport-loadbalancer-and-ingress/

## Puertos de getion del cluster ##
- 443, 8080, 10250 y 10255.

## Config cluster credencials for use in GCP ##
- gcloud container clusters get-credentials [cluster-name] --zone [zone] --project [Project-ID]

## General info ##
- kubectl cluster-info
- kubectl cluster-info dump
- kubectl config view

## DeamonSet ##
- kubectl get ds

## Namespaces ##
- kubectl get ns

## Deployments ##
- kubectl get deployments --all-namespaces
- kubectl delete deployments/apine-test

## PODS and NODES ##
- kubectl get pods
- kubectl get no -o wide
- kubectl get po -o wide --all-namespaces
- kubectl get pods --all-namespaces -o json
- kubectl get nodes --all-namespaces -o json
- kubectl exec $POD_NAME env
- kubectl exec -ti $POD_NAME bash
- kubectl delete pods --all

## LOGS ##
- kubectl logs my-pod
- kubectl logs my-pod -c my-container

## Politicas de seguridad ##
- kubectl get psp

## Network Policies ##
- kubectl get ns
- kubectl get networkpolicies --all-namespaces

## Volumenes persistente
-kubectl get pv

## Create JOB from YAML file##
- kubectl create -f [job.yaml]
- kubectl describe job [job-name]
- kubectl get jobs

## view services accounts config ###
- kubectl get serviceAccounts

## Basic container deploy ##
- kubectl create -f [pod-specification].yaml
- [pod-specification].yaml
		apiVersion: v1
		kind: Pod
		metadata:
		  name: shell-demo
		spec:
		  volumes:
		  - name: shared-data
			emptyDir: {}
		  containers:
		  - name: nginx
			image: nginx
			volumeMounts:
			- name: shared-data
			  mountPath: /usr/share/nginx/html
- kubectl get pod [pod]	
- kubectl exec -it [pod] -- /bin/bash
 
## Exploiting ##
- curl --insecure https://[ip]:10250/pods | jq

## Especify namespace ##
- kubectl get deployment [name] --namespace [namespace] -o yaml

## Pod Port forwarding ##
- kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &

## Service Port Forwarding
- kubectl port-forward -n kube-system service/kubernetes-dashboard 10443:443

## Listar secretos ##
- kubectl get secret

## Extraccion de secretos ##
- kubectl describe secret [secret-name]
- kubectl get secret [secret-name] -o json
- printf $(kubectl get secret [secret-name] -o jsonpath="{.data}" | [decode-specifi]);echo

https://medium.com/platformer-blog/using-kubernetes-secrets-5e7530e0378a
## Create Secrets ##
- echo -n some_text_to_encode | base64

## DeamonSet Logs ##
- kubectl logs ds/[name] -f

## Copy files from/to pods ##
- kubectl cp <file-spec-src> <file-spec-dest> -c <specific-container>
- kubectl cp <some-namespace>/<some-pod>:/tmp/example /tmp/example

## View Cluster Roles ##
- kubectl get clusterroles
- kubectl get roles

## Deploy YAML using variables ##
- export NOODEPOOL=$NodePool
- kubectlenvsubst < basic-deploiment-nodePool-selector.yaml | kubectl apply  -f -

## Rollback ##
- kubectl rollout history deployment [deployment-name]
- kubectl rollout undo deployments [deployment-name] --to-revision=[rollout history number]

## Resources #
kubectl top pod -n [namespace]

## Exec command in background
kubectl exec -i $pod -n $namespace -- /bin/bash -c "[command] > /dev/null 2> /dev/null &"

## Recursos de kubernetes 
kubectl api-resources

## Deployment status
kubectl rollout status deployment [deploymentname]

## Deployment history
kubectl rollout history deployment [name]
kubectl rollout history deployment [name] --revision=[number]

## RollBack
kubectl rollout undo deployment [name] --to-revison=[number]

## Mantain observing resource changes
kubernetes get [pods/svc/deployment/service] --watch

## Get all respurces from namespaces
kubectl get all -n [namespaces]

## Internal DNS nomenclature
serviceName + namespaceName + svc.cluster.local

## Context
	# Current context
	kubectl config current-context
	# All context
	kubectl config get-contexts
	# View config file
	kubectl config view
	# Raw Data
	kubectl config view --raw

## Kubectl Config
	# Config new cluster
	kubectl config set-cluster [cluster-name] --server=https://[IpAdres]:[port] --certificate-authority=[ca.cert]
	# Config user credentials
	kubectl config set-credentials [username] --client-certificate=[test.crt] --client-key=[test.key]
	# Config context
	kubectl config set-context [ContextName] --cluster=[cluster-name] --user=[username]
	# Select new context
	kubectl config use-context [ContextName]

	# With ServiceAccounts
	https://docs.armory.io/docs/spinnaker-install-admin-guides/manual-service-account/
	https://clux.github.io/probes/post/2019-03-31-impersonating-kube-accounts/


	


